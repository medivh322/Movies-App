{"version":3,"sources":["../node_modules/typescript/lib sync","redux/types/index.tsx","components/listItem/index.tsx","components/list/index.tsx","redux/actions/index.tsx","components/userItemPage/index.tsx","App.tsx","redux/reducers/index.tsx","redux/sagas/index.js","redux/index.js","serviceWorker.ts","index.tsx"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","FetchConstants","AppConstant","ListFilmsItem","title","year","poster","className","to","src","alt","connect","state","states","props","filmList","map","element","Title","imdbID","Poster","Year","payload","fetchFilms","list","type","FETCH_FILMS","SetSortingFilms","sortOrder","SET_SORT_FILMS","mapDispatchToProps","fetchDetailFilm","FETCH_DETAIL_FILM","detailData","params","useParams","useEffect","fetch","then","response","json","data","load","detailFilm","BoxOffice","Language","Plot","SortingMovies","sortKey","SORT_COL","inputRef","useRef","dispatch","useDispatch","path","exact","ref","placeholder","onClick","current","value","role","initialState","rootSaga","sortingData","sagaWorker","takeEvery","getFilmList","args","select","project","orderBy","sortingOb","put","console","log","LOADER","call","fetchMovies","res","Search","a","sagaMiddleware","createSagaMiddleware","store","createStore","action","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","applyMiddleware","run","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0f358956.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 27;","export enum FetchConstants{\r\n    LOADER = \"LOADER\",\r\n    FETCH_FILMS = \"FETCH_FILMS\",\r\n    FETCH_DETAIL_FILM = \"FETCH_DETAIL_FILM\",\r\n    SORT_COL = 'SORT_COL',\r\n    SET_SORT_FILMS = \"SET_SORT_FILMS\"\r\n}\r\n\r\nexport enum AppConstant{\r\n    SHOW_LOADER = \"SHOW_LOADER\",\r\n    HIDE_LOADER = \"HIDE_LOADER\"\r\n}\r\n\r\nexport interface FilmState{\r\n    filmList: any[];\r\n    payload? : string;\r\n    detailFilm: any[];\r\n    load?: boolean; \r\n    sortKey: string;\r\n    sortOrder: string;\r\n}\r\n\r\ninterface FetchDetailFilmAction{\r\n    type: FetchConstants.FETCH_DETAIL_FILM,\r\n    detailData: any[],\r\n}\r\n\r\ninterface FetchFilmsAction{\r\n    type: FetchConstants.FETCH_FILMS;\r\n    list: any[];\r\n    payload?: string; \r\n}\r\n\r\ninterface LoaderAction{\r\n    type: FetchConstants.LOADER;\r\n    load: boolean;\r\n}\r\n\r\ninterface Sorting{\r\n    type: FetchConstants.SORT_COL;\r\n    sortKey: string;\r\n}\r\n\r\ninterface SetSortingFilms{\r\n    type: FetchConstants.SET_SORT_FILMS;\r\n    list: any[];\r\n    sortOrder: string;\r\n}\r\n\r\nexport type FilmAction = FetchFilmsAction | FetchDetailFilmAction | LoaderAction | Sorting | SetSortingFilms;","import { ListProps } from \"../../types\";\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst ListFilmsItem = ({title, year, poster, id}: ListProps) => {\r\n    return(\r\n        <div className=\"col-3\">\r\n            <Link to={`/film/${id}`}>\r\n                <div className=\"card\">\r\n                    <img src={poster} alt=\"\" className=\"card__img\"/>\r\n                    <p className=\"card__title\">\r\n                        {title}\r\n                    </p>\r\n                    <div className=\"card__year\">\r\n                        {year}\r\n                    </div>\r\n                </div>\r\n            </Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ListFilmsItem;","import React, { FC } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { FilmAction, FilmState } from \"../../redux/types\";\r\nimport ListFilmsItem from \"../listItem\";\r\n\r\nconst ListFilms = (props: any) => {\r\n    return(\r\n        <div className=\"row\">\r\n            {(props.states.filmList) ?\r\n                props.states.filmList.map((element: any) => \r\n                    <ListFilmsItem title={element.Title} id={element.imdbID} poster={element.Poster} year={element.Year} key={element.imdbID}/>\r\n                ) : \r\n                <div className=\"col-12\">\r\n                    {props.states.payload}\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: any[]) => {\r\n    return {\r\n        states: state\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(ListFilms);","import { loadavg } from \"os\";\r\nimport { FetchConstants, FilmAction } from \"../types\";\r\n\r\nexport function fetchFilms(list: any[], payload: string) : FilmAction{\r\n    return {\r\n        type: FetchConstants.FETCH_FILMS,\r\n        list: list,\r\n        payload: payload,\r\n    }\r\n}\r\n\r\nexport function LoadShow(): FilmAction{\r\n    return {\r\n        type: FetchConstants.LOADER,\r\n        load: true\r\n    }\r\n}\r\n\r\nexport function LoadHide(): FilmAction{\r\n    return {\r\n        type: FetchConstants.LOADER,\r\n        load: false\r\n    }\r\n}\r\n\r\nexport function fetchDetailFilm(list: any[]) : FilmAction{\r\n    return {\r\n        type: FetchConstants.FETCH_DETAIL_FILM,\r\n        detailData: list\r\n    }\r\n}\r\n\r\nexport function SortingMovies(sortKey: string) : FilmAction{\r\n    return{\r\n        type: FetchConstants.SORT_COL,\r\n        sortKey: sortKey\r\n    }\r\n}\r\n\r\nexport function SetSortingFilms(list: any[], sortOrder: string) : FilmAction{\r\n    return {\r\n        type: FetchConstants.SET_SORT_FILMS,\r\n        list: list,\r\n        sortOrder: sortOrder\r\n    }\r\n}\r\n","import { FC, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { fetchDetailFilm } from \"../../redux/actions\";\r\n\r\ninterface PageParameters{\r\n    id: string;\r\n}\r\n\r\nconst FilmDetailPage: FC = (props: any) => {\r\n    const params = useParams<PageParameters>();\r\n\r\n    useEffect(() => {\r\n        fetch(`http://www.omdbapi.com/?apikey=2bf0e0c6&i=${params.id}`)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                props.fetchDetailFilm(data, true)\r\n            });\r\n    }, [props.load]);\r\n\r\n    return(\r\n        <div>\r\n            <img src={props.state.detailFilm.Poster}/>\r\n            <p>{props.state.detailFilm.BoxOffice}</p>\r\n            <p>{props.state.detailFilm.Language}</p>\r\n            <div>{props.state.detailFilm.Plot}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    fetchDetailFilm\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n    return{\r\n        state\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FilmDetailPage);","import React, { useRef } from 'react';\nimport { connect, useDispatch, useSelector } from 'react-redux';\nimport ListFilms from './components/list';\nimport { fetchFilms, SortingMovies } from './redux/actions';\nimport {BrowserRouter, NavLink, Route, RouteComponentProps} from 'react-router-dom';\nimport './style.css';\nimport FilmDetailPage from './components/userItemPage';\nimport { FetchConstants } from './redux/types';\n  \nconst App = (state: any) => {\n  const inputRef = useRef<HTMLInputElement | null>(null);\n  const dispatch = useDispatch();\n\n  const { SortingMovies } = state;\n\n  const clickInputHandler = () => {\n    if(null !== inputRef.current){\n      dispatch({\n        type: \"FETCH_MOVIE\",\n        id: inputRef.current.value\n      });\n    }\n  }\n\n  return (\n    <BrowserRouter>\n      <div className=\"container-fluid\">\n        <div className=\"navigation\">\n          <NavLink to=\"/Movies-App/\">Главная</NavLink>\n          <NavLink to=\"/Movies-App/about\">О команде</NavLink>\n        </div>\n        <Route path={'/Movies-App/'} exact>\n          <div className=\"d-flex\">\n            <input type=\"text\" ref={inputRef} placeholder=\"Название фильма на англ\"/>\n            <button onClick={(e) => clickInputHandler()}>Поиск</button> \n            <div className=\"sorting\"> \n              <p onClick={() => SortingMovies(\"Year\")}>Год</p>\n              <p onClick={() => SortingMovies(\"Title\")}>Название</p>\n            </div>\n            {(state.load) ? \n              <div className=\"spinner-border\" role=\"status\">\n                <span className=\"sr-only\">Loading...</span>\n              </div>  \n              : \"\"\n            }\n          </div>\n          <ListFilms />\n        </Route>\n        <Route path={'/Movies-App/about'} exact>\n          <div>Hello, my name is Emil</div>\n        </Route>\n        <Route path={'/Movies-App/film/:id'} exact>\n          <FilmDetailPage />\n        </Route>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nconst mapDispatchToProps = {\n  fetchFilms,\n  SortingMovies\n}\nconst mapStateToProps = (state: any) => {\n  return {\n    state: {\n      filmList: state.filmList,\n      load: state.load\n    }\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { FetchConstants, FilmAction, FilmState } from \"../types\";\r\n\r\nconst initialState : FilmState = {\r\n    filmList: [],\r\n    detailFilm: [],\r\n    load: false,\r\n    sortKey: '',\r\n    sortOrder: \"desc\"\r\n}\r\n\r\nexport default function reducer(state = initialState, action : FilmAction) : FilmState{\r\n    switch(action.type){\r\n        case FetchConstants.FETCH_FILMS:\r\n            return {...state, filmList: action.list, payload: action.payload}\r\n        case FetchConstants.FETCH_DETAIL_FILM:\r\n            return {...state, detailFilm: action.detailData}\r\n        case FetchConstants.LOADER:\r\n            return {...state, load: action.load}\r\n        case FetchConstants.SORT_COL:\r\n            return {...state, sortKey: action.sortKey}\r\n        case FetchConstants.SET_SORT_FILMS:\r\n            return {...state, filmList: action.list, sortOrder: action.sortOrder}\r\n        default:\r\n            return state;\r\n    }\r\n}","import { takeEvery, put, take, call, select } from \"@redux-saga/core/effects\";\r\nimport { isConstructorDeclaration } from \"typescript\";\r\nimport { fetchFilms, Load, LoadHide, LoadShow, SetSortingFilms } from \"../actions\";\r\nimport { FetchConstants } from \"../types\";\r\nimport { orderBy } from 'lodash';\r\n\r\nfunction* rootSaga(){\r\n    yield takeEvery(\"FETCH_MOVIE\", sagaWorker)\r\n    yield takeEvery(FetchConstants.SORT_COL, sortingData);\r\n}\r\n\r\nexport default rootSaga;\r\n\r\nconst getFilmList = (state) => state;\r\n\r\nfunction* sortingData(args){\r\n    let project = yield select(getFilmList);\r\n    let sortOrder = (project.sortOrder == \"desc\") ? \"asc\" : \"desc\";\r\n    const sortingOb = yield orderBy(project.filmList, project.sortKey, sortOrder);\r\n    yield put(SetSortingFilms(sortingOb, sortOrder));\r\n}\r\n\r\nfunction* sagaWorker(args){\r\n    console.log(args);\r\n    yield put(LoadShow());\r\n    const res = yield call(fetchMovies, args.id);   \r\n    yield put(fetchFilms(res.Search, (!res.Search) ? \"Не найдено\" : \"\"));\r\n    yield put(LoadHide());\r\n}\r\n\r\nasync function fetchMovies(id){\r\n    const response = await fetch(`http://www.omdbapi.com/?apikey=2bf0e0c6&s=${id}`);\r\n    return await response.json();\r\n}","import {createStore, applyMiddleware} from 'redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport reducer from './reducers';\r\nimport rootSaga from './sagas';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = createStore(\r\n    reducer, \r\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__(\r\n        applyMiddleware(sagaMiddleware)\r\n    )\r\n);\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport store from './redux';\nimport { Provider } from 'react-redux'; \nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}